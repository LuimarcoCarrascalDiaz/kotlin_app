package com.uniandes.ecobites.ui.data

import android.util.Log
import io.github.jan.supabase.auth.Auth
import io.github.jan.supabase.auth.auth
import io.github.jan.supabase.auth.providers.builtin.Email
import io.github.jan.supabase.createSupabaseClient
import io.github.jan.supabase.postgrest.Postgrest
import io.github.jan.supabase.postgrest.from
import io.github.jan.supabase.postgrest.query.Columns
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.buildJsonObject
import kotlinx.serialization.json.put

// Create Supabase Client
val supabase = createSupabaseClient(
    supabaseUrl = "https://nlhcaanwwchxdzdiyizf.supabase.co",
    supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5saGNhYW53d2NoeGR6ZGl5aXpmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mjc5MDc0OTQsImV4cCI6MjA0MzQ4MzQ5NH0.LrcRGkVH1qjPE09xDngX7wrtrUmfIYbTGrgbPKarTeM"
) {
    install(Postgrest)
    install(Auth)
}

// Store model
@Serializable
data class Store(
    val id: Int,
    val name: String,
    val description: String?,
    val address: String?,
    val phone: String?
)

// Fetch store details based on storeName
suspend fun fetchStore(storeName: String): Store {
    return withContext(Dispatchers.IO) {
        supabase.from("stores").select() {
            filter {
                eq("name", storeName)
            }
        }.decodeSingle<Store>()
    }
}

@Serializable
data class Product(
    val id: Int,
    val store_id: Int,
    val name: String,
    val price: Int
)

suspend fun fetchStoreProducts(storeId: Int): List<Product> {
    return withContext(Dispatchers.IO) {
        supabase.from("products").select() {
            filter {
                eq("store_id", storeId)
            }
        }.decodeList<Product>()
    }
}

// Function to handle user sign-in
suspend fun signInWithEmail(email: String, password: String): Result<Unit> {
    return withContext(Dispatchers.IO) {
        try {
            supabase.auth.signInWith(Email) {
                this.email = email
                this.password = password
            }
            Result.success(Unit)  // Success
        } catch (e: Exception) {
            Result.failure(e)  // Return failure with exception
        }
    }
}


suspend fun signUpWithEmailAndName(email: String, password: String, name: String): Result<Unit> {
    return withContext(Dispatchers.IO) {
        try {
            supabase.auth.signUpWith(Email) {
                this.email = email
                this.password = password
                data = buildJsonObject {
                    put("display_name", name)  // Add the user's name as metadata
                }
            }
            Result.success(Unit)  // Return success
        } catch (e: Exception) {
            Result.failure(e)  // Return failure with exception
        }
    }
}

@Serializable
data class CartItem(
    val id: Int? = null,  // Assuming id is generated by Supabase, so it can be nullable
    val user_id: String,  // The user's ID
    val product_id: Int,  // ID of the product being added to the cart
    val quantity: Int  // Quantity of the product in the cart
)

suspend fun clearCart(userId: String) {
    supabase.from("cart_items").delete {
        filter { eq("user_id", userId) }
    }
}

suspend fun addToCart(product: Product, quantity: Int, userId: String) {
    // Create a CartItem object
    val cartItem = CartItem(
        user_id = userId,
        product_id = product.id,
        quantity = quantity
    )

    // Insert the cartItem into the cart_items table
    supabase.from("cart_items").insert(cartItem)
}



suspend fun updateCartItem(productId: Int, newQuantity: Int, userId: String) {
    if (newQuantity > 0) {
        // Update the quantity if it's greater than zero
        supabase.from("cart_items").update(
            mapOf("quantity" to newQuantity)
        ) {
            filter {
                eq("product_id", productId)
                eq("user_id", userId)
            }
        }
    } else {
        // Delete the item if the new quantity is zero
        supabase.from("cart_items").delete {
            filter {
                eq("product_id", productId)
                eq("user_id", userId)
            }
        }
    }
}



suspend fun removeFromCart(productId: Int, userId: String) {
    // Remove the product from the cart
    supabase.from("cart_items").delete {
        filter {
            eq("product_id", productId)
            eq("user_id", userId)
        }
    }
}

suspend fun fetchCartItemsWithDetails(userId: String): List<CartProduct> {
    val rawResponse = supabase.from("cart_items")
        .select(Columns.raw("id, quantity, products(id, name, price)"))
        { filter { eq("user_id", userId) } }

    // Log the raw JSON response using Log.d
    Log.d("SupabaseResponse", "Raw JSON Response: ${rawResponse.data}")

    // Now decode after confirming the field names
    return rawResponse.decodeList<CartProduct>()  // Decode after logging
}



@Serializable
data class CartProduct(
    val id: Int,          // Cart item ID
    val quantity: Int,    // Quantity from the cart_items table
    val products: ProductInCart // Nested product details
)

@Serializable
data class ProductInCart(
    val id: Int,          // Product ID
    val name: String,    // Product name
    val price: Int       // Product price
)